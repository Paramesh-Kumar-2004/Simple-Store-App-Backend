Problem:
TypeError: Cannot read properties of undefined (reading 'single')
This error occurs because 'upload' is undefined, likely due to multer not being imported or initialized properly.

Correct Code Example:
// At the top of your ProductRoute.js file, add:
const multer = require('multer');
const multer = require('multer');
const upload = multer({ dest: 'uploads/' }); // or configure storage as needed

const express = require('express');
const router = express.Router();
const { isAuthenticate, authenticateRoles } = require('../middleware/auth');
const { createProduct } = require('../controllers/productController');

// Create Product Route
router.route("/createProducts").post(
    isAuthenticate,
    authenticateRoles("admin"),
    upload.single("img"),
    createProduct
);

module.exports = router;

// Then use 'upload.single("img")' in your route:
router.route("/createProducts").post(isAuthenticate, authenticateRoles("admin"), upload.single("img"), createProduct);

Make sure to install multer if you haven't already:
npm install multer








{
  "name": "Wireless Earbuds",
  "model": "AirBuds X2",
  "price": 2999,
  "category": "Electronics",
  "description": "High-quality wireless earbuds with noise cancellation.",
  "stock": 50,
  "sellerName": "TechStore",
  "sellerEmail": "contact@techstore.com",
  "sellerPhone": "+919876543210"
}





const createProduct = CatchAsyncError(async (req, res, next) => {
    console.log("\nEntered Into Create Products")
    try {
        const user = req.user.id
        const img = req.file ? req.file.path.replace(/\\/g, "/") : null;

        const {
            name,
            model,
            price,
            category,
            description,
            stock,
            sellerName,
            sellerEmail,
            sellerPhone
        } = req.body;

        const product = await Product.create({
            name,
            model,
            price,
            user,
            category,
            description,
            stock,
            sellerName,
            sellerEmail,
            sellerPhone,
            image: img
        });

        res.status(201).json({
            success: true,
            message: "Product created successfully",
            product,
        });
    }
    catch (error) {
        try {
            if (req.file && req.file.path) {
                const filePath = path.resolve(req.file.path);
                console.log("Deleting file:", filePath);
                await fs.unlink(filePath);
            }
        }
        catch (err) {
            console.error("Failed to delete file:", err);
        }
        return next(new ErrorHandler(error.message, 400));
    }
});

export async function createProduct(data) {
    try {
        const response = await api.post("/createProducts", data);
        return response.data;
    } catch (error) {
        console.error("Create Error:", error.response?.data || error.message);
        throw error.response?.data || { message: error.message };
    }
}


Write a Register Component.